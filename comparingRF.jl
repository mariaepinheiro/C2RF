using DataFrames, CSV, DataStructures, DelimitedFiles, Base.Threads
using DelimitedFiles, StatsBase, CSV, Random, DataFrames, LinearAlgebra
include("C2RF.jl")


function RandomForest(Xl, Xu, ma, nt, st)
    n, d = size(Xl)
    m, d = size(Xu)
    classificationu = zeros(m, nt)
    y = [ones(ma); zeros(n - ma)]
    rng1 = [4182, 80068, 51133, 58931, 71516, 41963, 48008, 63166, 14993, 32379, 39298, 79080, 18645, 54279, 78491, 41569, 66613, 9136, 40192, 32749, 88428, 9551, 4852, 24275, 27068, 19953, 59829, 22847, 832, 69852, 4675, 22251, 33046, 67883, 81291, 67740, 14990, 66851, 26375, 14943, 13482, 10426, 13646, 88280, 2899, 48869, 83247, 16049, 32120, 26281, 14062, 31445, 40170, 99299, 30557, 20475, 89040, 26786, 78893, 23683, 76721, 29820, 14408, 39073, 90822, 34423, 944, 7757, 56463, 71299, 92469, 78276, 44023, 63971, 11401, 48786, 65547, 41612, 55155, 7593, 34446, 53209, 83583, 89560, 49239, 85563, 73155, 37797, 38655, 16926, 18851, 52083, 39682, 83410, 99851, 82718, 96556, 7007, 67361, 92245, 50643, 80686, 99543, 10678, 40597, 55814, 46394, 35919, 35397, 32884, 77514, 75627, 89503, 41163, 17191, 27338, 79642, 749, 3305, 72769, 43185, 50974, 4819, 17905, 39939, 94763, 39378, 10557, 2759, 77231, 76925, 57447, 13593, 88990, 49120, 64258, 18525, 82977, 6325, 41705, 72467, 51769, 70875, 871, 18118, 54735, 69686, 42815, 62372, 86236, 84236, 79507, 520, 35206, 17312, 97224, 62437, 92533, 95631, 84290, 28847, 8055, 82859, 84639, 7449, 72087, 90608, 87430, 53402, 16234, 72368, 69960, 76735, 52231, 40342, 50461, 10734, 51784, 71229, 36698, 43389, 97890, 86717, 15046, 37063, 58744, 27679, 13257, 13699, 22976, 21423, 9037, 70661, 23104, 32187, 15880, 12744, 90142, 79122, 29711, 56056, 47309, 52070, 64363, 13792, 80998, 94656, 89374, 30912, 50239, 50748, 55012, 64111, 40307, 48220, 4641, 25321, 2813, 46128, 34965, 72857, 91076, 19903, 48233, 6327, 47181, 47453, 48139, 97096, 73228, 68715, 97405, 61381, 78642, 25603, 61595, 67186, 28204, 19284, 24789, 15196, 19659, 89301, 53528, 30047, 37006, 24616, 29043, 85763, 11759, 80442, 35545, 69928, 46101, 75628, 14032, 65224, 26594, 84660, 48996, 38320, 25494, 37812, 18229, 483, 84275, 90464, 63602, 31091, 12830, 55693, 48864, 27496, 86874, 68137, 20645, 46039, 76313, 42455, 16483, 50612, 30235, 4038, 94334, 61435, 8492, 20337, 13229, 63217, 15931, 68980, 49378, 53569, 30315, 99282, 56900, 33846, 11627, 316, 86761, 66843, 57565, 15580, 4509, 93794, 36266, 87290, 6595, 1897, 87691, 91201, 95382, 59978, 84690, 99751, 84046, 12170, 64032, 85156, 62963, 97200, 24885, 4197, 39255, 3866, 89745, 65192, 10296, 2028, 28645, 35111, 48453, 6230, 18714, 9348, 20467, 66417, 24155, 91400, 25863, 98464, 19721, 73012, 11342, 88315, 45596, 86157, 14573, 67527, 98110, 52012, 86981, 44411, 29462, 49576, 23324, 24705, 70194, 34192, 75550, 19635, 3619, 41908, 14963, 95407, 22878, 45758, 75171, 24835, 1848, 95534, 64555, 81771, 74327, 42206, 82265, 82670, 45129, 1459, 64210, 23302, 44352, 34644, 87894, 70942, 53616, 74834, 1866, 49750, 40075, 31256, 84749, 22297, 19307, 88640, 22974, 50616, 19853, 46991, 28771, 4319, 87117, 78269, 44013, 61440, 94017, 9957, 53716, 31056, 89526, 16571, 61180, 20556, 63977, 15988, 99197, 51563, 86175, 66461, 43774, 84577, 45478, 39284, 30676, 97047, 28216, 85443, 50011, 3840, 71402, 12199, 76532, 23839, 84982, 24335, 49130, 4134, 9789, 92417, 14591, 81765, 65780, 48534, 27207, 98495, 87925, 2321, 51283, 48639, 55300, 17359, 96945, 18530, 1946, 28727, 15375, 96060, 28760, 96384, 15553, 41289, 47256, 44338, 6159, 95213, 98379, 88247, 88232, 25540, 22062, 95297, 84440, 5234, 48063, 65075, 24751, 88057, 91877, 69008, 69292, 61761, 44614, 42406, 54695, 64475, 81553, 22348, 34796, 34625, 96636, 5417, 35282, 46441, 51873, 20878, 48816, 80100, 64165, 85350, 80578, 28278, 73137, 18697, 30600, 39856, 27259, 61530, 68751, 56362, 41005, 55897, 10337, 40838, 66291, 42946, 37952, 84376, 45101, 60424, 62295, 84700, 50969, 10447, 95854, 92559, 25934, 54234, 20180, 72641, 24526, 42574, 49554, 40928, 86508, 63407, 52899, 67556, 49620, 23089, 33003, 20155, 28421, 63712, 68452, 94716, 77361, 11602, 63956, 32600, 97618, 39481, 42648, 89015, 96371, 38105, 73358, 80821, 33437, 74916, 87566, 38962, 92020, 73810, 79894, 44153, 6799, 62413, 89865, 73937, 96259, 77243, 94824, 50454, 64263, 89446, 90971, 52692, 48975, 32981, 964, 53745, 88573, 70799, 61240, 89189, 48058, 97980, 4833, 98151, 44068, 65267, 2416, 79171, 36427, 46477, 4912, 59372, 5148, 64025, 53369, 27339, 65443, 52710, 77117, 50132, 98767, 49654, 33572, 29826, 10007, 24060, 43073, 84623, 10935, 3107, 52451, 63038, 30532, 99570, 73487, 54643, 87926, 53201, 2772, 43225, 47612, 26, 67973, 60793, 36542, 6549, 65765, 77865, 99432, 63011, 98940, 18088, 80001, 498, 39401, 21732, 46781, 83140, 2512, 2384, 46161, 91004, 62770, 73109, 94986, 50016, 85390, 95619, 42368, 26149, 49465, 29004, 65916, 93234, 28157, 51425, 57091, 28235, 73762, 69459, 26621, 14650, 34079, 27466, 18253, 49007, 53902, 89134, 72422, 9435, 46752, 80243, 89798, 82567, 64686, 23183, 69924, 29881, 6522, 44791, 46187, 66554, 67041, 98530, 50048, 75298, 10453, 35972, 8480, 52540, 66081, 83138, 55511, 42733, 44181, 9479, 52182, 5370, 48185, 3566, 19907, 79496, 77667, 82719, 96905, 91421, 92151, 61759, 53541, 52951, 18557, 84024, 26713, 14031, 81492, 12138, 10769, 51268, 23161, 48810, 64566, 752, 94810, 86088, 42281, 31174, 15267, 66989, 14863, 71640, 26444, 30747, 66974, 98533, 54326, 88126, 73060, 2674, 57125, 76906, 25838, 3962, 94444, 70510, 96614, 81834, 57215, 80255, 66648, 86170, 27099, 28309, 78639, 92680, 81846, 1556, 30615, 8240, 94162, 62938, 11490, 12082, 56477, 34447, 19150, 9524, 45919, 46577, 56004, 7739, 50562, 6912, 46250, 35879, 56803, 66236, 41426, 280, 6432, 59559, 65474, 57901, 18067, 21143, 24917, 25776, 7225, 57141, 87847, 6662, 33821, 50778, 42704, 98414, 27536, 13988, 37791, 86724, 5760, 41316, 46125, 31002, 8968, 98366, 78383, 2797, 90005, 93781, 11712, 76052, 85632, 26336, 91391, 78857, 12674, 82290, 76781, 43484, 43996, 23530, 78149, 91864, 35460, 21242, 68752, 27784, 291, 85018, 32519, 83194, 29990, 80200, 62115, 71580, 18561, 90999, 1113, 16401, 98644, 15515, 43047, 92986, 89341, 40619, 16659, 21739, 13156, 56991, 60549, 73444, 9956, 49132, 19835, 22481, 45133, 64262, 10371, 8711, 15417, 2515, 29845, 57506, 42101, 99675, 21432, 65673, 42569, 99638, 5493, 56330, 74622, 4209, 2631, 37833, 53517, 38396, 3350, 6157, 63843, 97016, 18036, 59524, 94667, 86569, 88348, 18775, 2551, 72559, 29186, 2411, 79683, 1500, 28259, 44493, 48051, 28933, 48425, 82408, 95482, 10548, 22686, 38718, 43748, 74529, 71702, 4874, 86083, 34820, 81885, 69845, 15617, 12609, 65713, 12918, 2699, 42857, 61990, 87541, 85312, 5619, 19703, 57876, 9794, 83426, 19967, 53983, 25415, 91609, 6562, 24879, 52593, 27036, 61913, 14730, 22513, 64443, 41065, 91885, 93076, 65600, 12989, 8924, 82601, 96072, 29729, 6337, 13223, 3595, 1963, 13450, 35281, 93664, 16563, 88631, 34470, 6153, 96962, 87341, 41012, 12010, 95727, 46219, 30324, 71302, 73729, 54016, 81340, 84458, 69665, 96669, 45868, 59426, 70572, 44866, 24493, 89605, 34295, 32430, 70413, 74140, 22406, 66404, 52154, 3791, 24265, 80738, 18829, 78034, 60567, 72128, 86397, 73475, 93833, 20906, 42614]
    for i = 1:nt
        sample1 = sample(MersenneTwister(rng1[i]), 1:n, st, replace=false)
        Xsl = Xl[sample1, :]
        ys = y[sample1]
        Random.seed!(42)
        model = DecisionTreeClassifier(max_depth=2)
        DecisionTree.fit!(model, Xsl, string.(ys))
        for j = 1:m
            classificationu[j, i] = parse(Float64, DecisionTree.predict(model, Xu[j, :]))
        end

    end

    return classificationu

end

function rescaling(X) #function for rescaling and get the elements of the matrix between -100 and 100
    m, n = size(X)
    for i = 1:n
        b = maximum(X[:, i])
        l = minimum(X[:, i])
        u = (l + b) / 2
        X[:, i] = X[:, i] - u * ones(m)
        b1 = b - u
        l1 = l - u
        w = b1 - l1
        zb = 1e2
        zl = -1e2
        if b1 > zb || l1 < zl
            for j = 1:m
                X[j, i] = (zb - zl) * (X[j, i] - l1) / (b1 - l1) + zl
            end
        end
    end
    return X
end


function preprocessingdata(A)
    D = CSV.read("datasetRF/$A.tsv", DataFrame)
    D = unique(D)
    s, p = size(D)
    D = Matrix(D)
    D = convert(Matrix{Float64}, D)
            Y = D[:, end]
        D = D[:, 1:end-1]
        s, p = size(D)
        for i = 1:s
            if Y[i] != 1
                Y[i] = -1
            end
        end
    end
    D = rescaling(D)
    g = Int64(round(0.01 * s))
    return D, Y, p, s, g
end

function comparing(P1, Y1, s, g, MCnum, M1, D, nt, st,â„“,u,B=0)
    rng = MersenneTwister(70)
    S = Vector{Vector{Int32}}(undef,MCnum) 
    if B==1 # sample under simple sample
        for i = 1:MCnum
           S[i] = sample(rng,1:s , g; replace=false) 
        end
    else # sample under Biased sample
        SamplingProb = fill(0.15, s)
        SamplingProb[Y1 .== 1] .= 0.85 # sample under Biased sample
        for i = 1:MCnum
            S[i] = StatsBase.wsample(rng, 1:s, SamplingProb, g; replace=false)
        end
    end
    TP1 = zeros(MCnum)
    TP2 = zeros(MCnum)
    FP1 = zeros(MCnum)
    FP2 = zeros(MCnum)
    TN1 = zeros(MCnum)
    TN2 = zeros(MCnum)
    FN1 = zeros(MCnum)
    FN2 = zeros(MCnum)
    TP1u = zeros(MCnum)
    TP2u = zeros(MCnum)
    TP3u = zeros(MCnum)
    FP1u = zeros(MCnum)
    FP2u = zeros(MCnum)
    FP3u = zeros(MCnum)
    TN1u = zeros(MCnum)
    TN2u = zeros(MCnum)
    TN3u = zeros(MCnum)
    FN1u = zeros(MCnum)
    FN2u = zeros(MCnum)
    FN3u = zeros(MCnum)
    f1 = zeros(MCnum)
    f2 = zeros(MCnum)
    f3 = zeros(MCnum)
    ti1 = zeros(MCnum)
    ti2 = zeros(MCnum)
    ti3 = zeros(MCnum)
    GAP1 = zeros(MCnum)
    GAP2 = zeros(MCnum)
    ALPHA = zeros(nt, MCnum)
    ALPHA2 = zeros(nt, MCnum)
    for i = 1:MCnum
        X = P1[S[i], :]
        y = Y1[S[i]]
        k = sort(S[i])
        H = deleteat!(collect(1:s), k)
        yA = findall(==(1), y)
        yB = findall(==(-1), y)
        AX = X[yA, :]
        BX = X[yB, :]
        y = [y[yA]; y[yB]]
        X1 = P1[H, :]
        y1 = Y1[H]
        Ï„A = 0
        Ï„B = 0
        for L = 1:s-g
            if y1[L] == 1
                Ï„A += 1
            else
                Ï„B += 1
            end
        end
        ma = size(AX, 1)
        XAB = [AX; BX]
        t = 0
        

        t2 = @elapsed H2 = RandomForest(XAB, X1, ma, nt, st)
        ti1[i] = t2
        z1 = round.(mean(H2, dims=2))
        for j = 1:s-g
            ac = z1[j]
            if ac > 0.5
                if y1[j] == 1
                    TP1u[i] += 1
                else
                    FP1u[i] += 1
                end
            else
                if y1[j] == -1
                    TN1u[i] += 1
                else
                    FN1u[i] += 1
                end
            end
        end
   
        for AA = 1:length(H2)
            if H2[AA] == 0
                H2[AA] = -1
            end
        end
      
        t3 = @elapsed classF,Î±,fun,gap =  RFpreprocessingmain(H2,Ï„A,â„“,u,1,7200)
        f2[i] = fun
        ALPHA[:,i] = Î±
        GAP1[i] = gap
        ti2[i] = t2 + t3
        for j = 1:g

            if y[j] == 1
                TP2[i] += 1
            else
                TN2[i] += 1
            end
        end
        for j = 1:s-g
            ac = classF[j]
            if ac > 0
                if y1[j] == 1
                    TP2u[i] += 1
                else
                    FP2u[i] += 1
                end
            else
                if y1[j] == -1
                    TN2u[i] += 1
                else
                    FN2u[i] += 1
                end
            end
        end
        t3 = @elapsed classF,Î±,fun,gap =  classRF(H2,Ï„A,â„“,u,7200)
        f3[i] = fun
        ALPHA2[:,i] = Î±
        ti3[i] = t2 + t3
        GAP2[i] = gap
       
            for j = 1 : s-g
                ac = classF[j]
                if ac >= 0.5
                    if y1[j] == 1
                        TP3u[i] += 1
                    else
                        FP3u[i] += 1
                    end
                else
                    if y1[j] == -1
                        TN3u[i] += 1
                    else
                        FN3u[i] += 1
                    end
                end
            end
       
    
        println("comparing $i finished")
    end
    FUN = [f1 f2 f3]
    CSV.write("results/$B/functionvalue$D.csv", DataFrame(FUN, :auto))
    CSV.write("results/$B/ALPHA$D.csv", DataFrame(ALPHA, :auto))
    CSV.write("results/$B/ALPHA2$D.csv", DataFrame(ALPHA2, :auto))
    GAP = [GAP1 GAP2]
    CSV.write("results/$B/GAP$D.csv", DataFrame(GAP, :auto))
    TP = [TP1 TP2 TP1u TP2u TP3u]
    CSV.write("results/$B/TruePositive$D.csv", DataFrame(TP, :auto))

    TN = [TN1 TN2 TN1u TN2u TN3u]
    CSV.write("results/$B/TrueNegative$D.csv", DataFrame(TN, :auto))

    FP = [FP1 FP2 FP1u FP2u FP3u]
    CSV.write("results/$B/FalsePositive$D.csv", DataFrame(FP, :auto))

    FN = [FN1 FN2 FN1u FN2u FN3u]
    CSV.write("results/$B/FalseNegative$D.csv", DataFrame(FN, :auto))

    TIME = [ti1 ti2 ti3]
    CSV.write("results/$B/TIMEs$D.csv", DataFrame(TIME, :auto))
    
end



function running(i,MCnum)
    P1,Y1,M1,s,g = preprocessingdata(i)
     D = i
     nt = 20
     st = Int64(round(0.2 * g))
     comparing(P1, Y1, s, g, MCnum, M1, D, nt, st,1,100)
    
end
